{"remainingRequest":"/node/src/code-factory/node_modules/vue-loader/lib/index.js??vue-loader-options!/node/src/code-factory/lsrkyyezwbvy/src/components/upload.vue?vue&type=style&index=0&id=66afef91&scoped=true&lang=less&","dependencies":[{"path":"/node/src/code-factory/lsrkyyezwbvy/src/components/upload.vue","mtime":1649314960101},{"path":"/node/src/code-factory/node_modules/css-loader/dist/cjs.js","mtime":1648824489044},{"path":"/node/src/code-factory/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1648824494945},{"path":"/node/src/code-factory/node_modules/postcss-loader/src/index.js","mtime":1648824491664},{"path":"/node/src/code-factory/node_modules/less-loader/dist/cjs.js","mtime":1648824480710},{"path":"/node/src/code-factory/node_modules/cache-loader/dist/cjs.js","mtime":1648824486287},{"path":"/node/src/code-factory/node_modules/vue-loader/lib/index.js","mtime":1648824494917}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5wcm9ncmVzc3sKCWhlaWdodDogMnB4OwoJYmFja2dyb3VuZDogIzY2Y2MzYTsKfQo="},{"version":3,"sources":["upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmQA;AACA;AACA;AACA","file":"upload.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div @click=\"handleClick\">\n      <slot />\n    </div>\n\t\t<div class=\"progress\" :style=\"{width: progressWidth}\" v-if=\"showProgress\"></div>\n    <input\n      ref=\"file\"\n      v-show=\"false\"\n      type=\"file\"\n      :accept=\"accept\"\n      @change=\"handleChange\"\n\t\t\t:disabled=\"disabled\"\n    />\n  </div>\n</template>\n\n<script>\nconst qiniu = require(\"qiniu-js\");\nimport { baseURL } from \"@/util/util\";\nexport default {\n  name: \"upload\",\n  data() {\n    return {\n\t\t\tshowProgress: false,\n\t\t\tprogressWidth: '0',\n      chunkParams : {\n          file:'', // 添加文件\n          chunks:'', // 总块儿数\n          chunk:0, // 当前第几块儿\n          chunkSize:'', //当前块儿大小\n          name :'', //文件名\n          id:''  //分片文件  md5\n      },\n      bufferLength:1024 * 1024 * 4\n\t\t};\n  },\n  props: {\n    // 支持上传文件类型\n    accept: {\n      type: String,\n      default: \"*\",\n    },\n    // 上传前方法\n    beforeUpload: {\n      type: Function,\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    // 本地上传  还是七牛上传\n    type: {\n      type: String,\n      default: \"\",\n    },\n    // 唯一值\n    uuid: {\n      type: String,\n      default: \"\",\n    },\n    // 域名\n    domain: {\n      type: String,\n      default: \"\",\n    },\n\t\t// 本地存储路径\n\t\tsavePath: {\n\t\t\ttype: String,\n\t\t\tdefault: ''\n\t\t}\n  },\n  methods: {\n    /* 上传文件 */\n    handleChange() {\n      const [file] = this.$refs.file.files;\n      const flag = this.beforeUpload(file);\n\t\t\tthis.uploadFile(flag,file)\n    },\n\t\tuploadFile(flag,file){\n\t\t\t// 是否可以上传\n      if (flag) {\n        // 七牛\n        if (this.type === \"2\") {\n          this.qiniuUpload(this.uuid, file);\n        } else if (this.type === \"1\") {\n          this.initparams(file);\n          // 本地\n\t\t\t\t\tthis.defaultUpload(file)\n        }\n      }\n\t\t},\n    /* 点击\n     * 弹出选择文件框\n     */\n    handleClick() {\n      this.$refs.file.click();\n    },\n    /* 获取七牛的token\n     * @param {String} uuid 唯一值\n     * @param {String} fileName 文件名称\n     */\n    getQiniuToken(uuid, fileName) {\n      return this.$get(`/process/v1/getQnUploadToken/${uuid}`, {\n        fileName,\n      });\n    },\n\n    /*\n     * 七牛上传\n     * @param {String} uuid 唯一值\n     * @param {File} file 文件\n     */\n    async qiniuUpload(uuid, file) {\n\t\t\t// 域名后是否包含/\n\t\t\tconst domain = this.domain.slice(this.domain.length - 1,this.domain.length) === '/' ? this.domain : this.domain + '/'\n\n      // 获取token\n      const { data: token } = await this.getQiniuToken(uuid, file.name);\n      if (!token) return;\n      const that = this;\n\t\t\t\n      const observer = {\n        next(res) {\n          // 当前上传进度\n          that.$emit(\"progress\", res);\n\t\t\t\t\tthat.showProgress = true\n\t\t\t\t\tthat.progressWidth = res.total.percent + '%'\n        },\n        error(err) {\n          that.$emit(\"error\", err);\n        },\n        complete(res) {\n          that.$emit(\"change\", {\n            title: file.name,\n            url: domain + res.key,\n          });\n\t\t\t\t\tthat.showProgress = false\n        },\n      };\n      // 上传配置\n      const config = {\n        useCdnDomain: true,\n        region: qiniu.region.z1,\n      };\n      // 文件配置\n      const putExtra = {\n        fname: file.name,\n      };\n      const observable = qiniu.upload(file, file.name, token, putExtra, config);\n      // 上传开始\n      observable.subscribe(observer);\n    },\n    /* 转form 对象 */\n    setFormData(data) {\n      let params = new FormData();\n      if (data) {\n        Object.keys(data).forEach(function(key) {\n          params.append(key, data[key]);\n        });\n      }\n      return params;\n    } ,\n    /* 初始化参数 */\n    initparams(file){\n        //设置分片大小（单位Byte）\n        this.chunkParams.chunks = Math.ceil(file.size / this.bufferLength);\n        this.chunkParams = {\n          file:'', // 添加文件\n          chunks:Math.ceil(file.size / this.bufferLength), // 总块儿数\n          chunk:0, // 当前第几块儿\n          chunkSize:this.bufferLength, //当前块儿大小\n          name :file.name, //文件名\n          id:this.$uuid()  //文件 唯一标示\n        }\n    },\n    /* 递归上传 */\n    deepUpload(file,lastUpload){\n      //计算开始的切割点,idx是上传成功的分片数，未上传过文件则开始点为0\n      let start = this.chunkParams.chunk * this.bufferLength;\n      //计算分割的位置\n      let end = start + this.bufferLength;\n      //如果分割点超出文件大小，回退分割点\n      if (end > file.size) {end = file.size;}\n      this.chunkParams.file = file.slice(start, end);\n      let totalPercent = lastUpload ? lastUpload : 0;\n      this.$postPorm(\n                `/process/v1/fileUpload`,\n                this.setFormData(this.chunkParams),\n                //进度条的回调\n              (res)=>{\n                let temp = 0;\n                if(res.loaded === res.total){\n                  totalPercent += res.total\n                  temp = totalPercent\n\n                }else{\n                  temp = totalPercent + res.loaded\n                }\n                this.showProgress = true;\n        \t\t    this.progressWidth = (temp / file.size) * 100 + '%';\n              }\n            ).then(result=>{\n              if(result && result.data.code == 200){\n                if(result.data.data.url){\n                  const domain = this.domain.slice(this.domain.length - 1,this.domain.length) === '/' ? this.domain : this.domain + '/'\n                  this.$emit(\"change\", {\n                      title: file.name,\n                      url: domain + result.data.data.url,\n                    });\n                  this.showProgress = false\n                }else{\n                  this.deepUpload(file,totalPercent,++this.chunkParams.chunk)\n                }\n              }else{\n                this.$emit(\"error\", result.data.msg);\n                this.showProgress = false;\n              }\n          }).catch(err=>{\n              this.$emit(\"error\", '内部服务器错误');\n            })\n    },\n    /* 默认上传 */\n    async defaultUpload(file) {\n      if(file.size > this.bufferLength){\n        this.deepUpload(file)\n      }else{\n        const formdata = new FormData();\n        // 添加文件\n        formdata.append(\"file\", file);\n        // 添加参数 token\n        formdata.append(\"TOKEN\", sessionStorage.getItem(\"token\"));\n        // 本地保存路径\n        formdata.append('savePath',this.savePath)\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          // 如果完成\n          if (xhr.readyState === 4 && xhr.status === 200) {\n            const res = JSON.parse(xhr.response);\n        \t\tthis.$emit('change',res.data)\n        \t\tthis.showProgress = false\n          }\n        };\n        xhr.upload.onprogress = event => {\n        \tif (event.lengthComputable) {\n        \t\tconst percent = (event.loaded / event.total) * 100 + '%';\n        \t\tthis.showProgress = true\n        \t\tthis.progressWidth = percent\n        \t}\n        };\n        xhr.open(\"post\", baseURL + \"/process/v1/uploadFile\", true);\n        xhr.send(formdata);\n      }\n    },\n  },\n};\n</script>\n<style scoped lang=\"less\">\n\t.progress{\n\t\theight: 2px;\n\t\tbackground: #66cc3a;\n\t}\n</style>"]}]}