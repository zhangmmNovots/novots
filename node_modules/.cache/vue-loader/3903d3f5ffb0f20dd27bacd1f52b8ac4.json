{"remainingRequest":"/node/src/code-factory/node_modules/vue-loader/lib/index.js??vue-loader-options!/node/src/code-factory/lsrkyyezwbvy/src/components/writingPad.vue?vue&type=style&index=0&id=a9d4a6b2&lang=less&scoped=true&","dependencies":[{"path":"/node/src/code-factory/lsrkyyezwbvy/src/components/writingPad.vue","mtime":1649314960041},{"path":"/node/src/code-factory/node_modules/css-loader/dist/cjs.js","mtime":1648824489044},{"path":"/node/src/code-factory/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1648824494945},{"path":"/node/src/code-factory/node_modules/postcss-loader/src/index.js","mtime":1648824491664},{"path":"/node/src/code-factory/node_modules/less-loader/dist/cjs.js","mtime":1648824480710},{"path":"/node/src/code-factory/node_modules/cache-loader/dist/cjs.js","mtime":1648824486287},{"path":"/node/src/code-factory/node_modules/vue-loader/lib/index.js","mtime":1648824494917}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoud3JpdGluZyB7CiAgJi1wYWQgewogICAgZGlzcGxheTogZmxleDsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIGhlaWdodDogY2FsYygxMDAlIC0gNDBweCk7CiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2U5ZWFmMDsKICAgIC5jYW52YXMgewogICAgICB3aWR0aDogMTAwJTsKICAgICAgaGVpZ2h0OiAxMDAlOwogICAgfQogIH0KICAmLWNsZWFyIHsKICAgIGhlaWdodDogNDBweDsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7CiAgICBjb2xvcjogQHByaW1hcnktY29sb3I7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogIH0KfQo="},{"version":3,"sources":["writingPad.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"writingPad.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t<div class=\"writing\" >\n\t\t<div class=\"writing-pad\">\n\t\t\t<canvas class=\"canvas\" ref=\"canvas\" @mousedown=\"mousedown\" @mousemove=\"mousemove\" @mouseup=\"mouseup\"></canvas>\n\t\t</div>\n\t\t<div class=\"writing-clear\" @click=\"clearCanvas\">清除</div>\n\t\t<upload v-show=\"false\" \n\t\t\t:uuid=\"uuid\"\n      :type=\"type\"\n      :domain=\"domain\"\n      :savePath=\"savePath\"\n\t\t\tref=\"upload\"\n\t\t\t@change=\"uploadChange\"\n\t\t\t@error=\"uploadError\"\n\t\t/>\n\t</div>\n</template>\n<script>\nimport {baseURL} from '@/util/util';\nimport upload from '@/components/upload'\n\nexport default{\n  name: 'writingPad',\n\tprops:{\n\t\t// 本地上传  还是七牛上传\n    type: {\n      type: String,\n      default: \"\",\n    },\n    // 唯一值\n    uuid: {\n      type: String,\n      default: \"\",\n    },\n    // 域名\n    domain: {\n      type: String,\n      default: \"\",\n    },\n\t\t// 本地存储路径\n\t\tsavePath: {\n\t\t\ttype: String,\n\t\t\tdefault: ''\n\t\t}\n\t},\n  data(){\n    return {\n\t\t  ctx: '',\n\t\t\tpoints: [],\n\t\t\tcanvas: '',\n\t\t\ttimerOut: null,\n      uploadUrl: baseURL + '/process/v1/uploadFile'\n    }\n  },\n  methods:{\n    initWritingPad(){\n      let canvas = this.$refs.canvas;\n      canvas.width = this.$refs.canvas.parentNode.clientWidth;\n      canvas.height = this.$refs.canvas.parentNode.clientHeight;\n      this.ctx = canvas.getContext('2d');\n      this.ctx.lineWidth = 4;\n      this.ctx.lineCap = 'round';\n      this.ctx.lineJoin = 'round';\n      this.canvas = this.$refs['canvas'];\n    },\n    getMousePos(canvas, evt) {\n\t\t\tvar rect = canvas.getBoundingClientRect();\n\t\t\treturn {\n\t\t\t\tx: evt.clientX - rect.left * (rect.width / canvas.width),\n\t\t\t\ty: evt.clientY - rect.top * (canvas.height / rect.height)\n\t\t\t};\n\t\t},\n\t\t/* 点击的时候保存下来位置\n\t\t * @param {e} e 自定义属性\n\t\t */\n\t\tmousedown(e) {\n\t\t\tconst obj = this.getMousePos(e.target, e);\n\t\t\tconst startX = obj.x;\n\t\t\tconst startY = obj.y;\n\t\t\te.preventDefault();\n\t\t\tconst startPoint = {\n\t\t\t\tX: startX,\n\t\t\t\tY: startY\n\t\t\t};\n\t\t\tthis.points.push(startPoint);\n\t\t\tthis.ctx.beginPath();\n\t\t},\n    /* 移动的时候保存下来位dd\n\t\t * @param {e} e 自定义属性\n\t\t */\n\t\tmousemove(e) {\n\t\t\te.preventDefault();\n\t\t\tif (this.points.length) {\n\t\t\t\tconst obj = this.getMousePos(e.target, e);\n\t\t\t\tlet moveX = obj.x;\n\t\t\t\tlet moveY = obj.y;\n\t\t\t\tlet movePoint = {\n\t\t\t\t\tX: moveX,\n\t\t\t\t\tY: moveY\n\t\t\t\t};\n\t\t\t\tthis.points.push(movePoint); //存点\n\t\t\t\tlet len = this.points.length;\n\t\t\t\tif (len >= 2) {\n\t\t\t\t\tthis.draw(); //绘制路径\n\t\t\t\t}\n\t\t\t}\n\t\t},\n    /* 画 */\n\t\tdraw() {\n\t\t\tlet point1 = this.points[0];\n\t\t\tlet point2 = this.points[1];\n\t\t\tthis.points.shift();\n\t\t\tthis.ctx.moveTo(point1.X, point1.Y);\n\t\t\tthis.ctx.lineTo(point2.X, point2.Y);\n\t\t\tthis.ctx.stroke();\n\t\t},\n\n\t\t/* 清空canvas */\n\t\tclearCanvas() {\n\t\t\tthis.$nextTick(() => {\n\t\t\t\t// 重置画布\n\t\t\t\tthis.ctx.clearRect(0, 0, this.$refs['canvas'].width, this.$refs['canvas'].height);\n\t\t\t\t// 清空数据\n\t\t\t\tthis.$emit('change','')\n\t\t\t});\n\t\t},\n    /* 触摸结束，将未绘制的点清空防止对后续路径产生干扰 */\n\t\tmouseup() {\n\t\t\tthis.timerOut && clearTimeout(this.timerOut);\n\t\t\tthis.points = [];\n\t\t\tthis.$nextTick(() => {\n\t\t\t\tconst blob = this.dataURLtoBlob(this.$refs.canvas.toDataURL('image/png'));\n\t\t\t\tblob.name = this.$uuid() + 'writingPad.png';\n\t\t\t\tthis.timerOut = setTimeout(() => {\n\t\t\t\t\tthis.uploadFile(blob);\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t},\n    /* base64转blob\n    * @param {String} baseurl base64\n    */\n    dataURLtoBlob(baseurl) {\n      let arr = baseurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n      return new Blob([u8arr], {\n        type: mime\n      });\n    },\n    /* 上传文件\n\t\t * @param {Blob} file 文件\n\t\t */\n\t\tuploadFile(file) {\n\t\t\tthis.$refs.upload.uploadFile(true,file)\n\t\t},\n\t\t/* 上传失败 */\n\t\tuploadError(error){\n\t\t\tconsole.log(error)\n\t\t},\n\t\t/* 上传成功 */\n\t\tuploadChange(file){\n\t\t\tthis.$emit('change',file)\n\t\t},\n\n  },\n  mounted(){\n    this.initWritingPad()\n  },\n\tcomponents:{\n\t\tupload\n\t}\n}\n</script>\n<style lang=\"less\" scoped>\n  .writing {\n    &-pad {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: calc(100% - 40px);\n      border-bottom: 1px solid #e9eaf0;\n      .canvas {\n        width: 100%;\n        height: 100%;\n      }\n    }\n    &-clear {\n      height: 40px;\n      display: flex;\n      flex-direction: row-reverse;\n      color: @primary-color;\n      align-items: center;\n    }\n  }\n</style>"]}]}