{"remainingRequest":"/node/src/code-factory/node_modules/vue-loader/lib/index.js??vue-loader-options!/node/src/code-factory/lsrkyyezwbvy/src/components/validate.vue?vue&type=style&index=0&id=5e776a26&scoped=true&lang=less&","dependencies":[{"path":"/node/src/code-factory/lsrkyyezwbvy/src/components/validate.vue","mtime":1649314960141},{"path":"/node/src/code-factory/node_modules/css-loader/dist/cjs.js","mtime":1648824489044},{"path":"/node/src/code-factory/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1648824494945},{"path":"/node/src/code-factory/node_modules/postcss-loader/src/index.js","mtime":1648824491664},{"path":"/node/src/code-factory/node_modules/less-loader/dist/cjs.js","mtime":1648824480710},{"path":"/node/src/code-factory/node_modules/cache-loader/dist/cjs.js","mtime":1648824486287},{"path":"/node/src/code-factory/node_modules/vue-loader/lib/index.js","mtime":1648824494917}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb250ZW50IHsKICA+ICogewogICAgYm9yZGVyOiAxcHggc29saWQgI2UyNTI0NiAhaW1wb3J0YW50IDsKICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCByZ2JhKDIyNiwgODIsIDcwLCAwLjMpICFpbXBvcnRhbnQ7CiAgfQp9Ci5ydWxlIHsKICBjb2xvcjogI2UyNTI0NjsKICB0cmFuc2l0aW9uOiBjb2xvciAwLjNzIGN1YmljLWJlemllcigwLjQsIDAsIDEsIDEpOwp9Cg=="},{"version":3,"sources":["validate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"validate.vue","sourceRoot":"src/components","sourcesContent":["\n<template>\n  <div class=\"validate\">\n    <div :class=\"validateClassName\">\n      <slot></slot>\n    </div>\n    <div class=\"rule\" v-if=\"validateClassName\">\n      {{ \n        errorMessage\n      }} \n    </div>\n  </div>\n</template>\n<script>\nimport validator from \"validator\";\n\nexport default {\n  name: \"validate\",\n  props: {\n    value: {},\n    rules: {\n      type: Array,\n      default: () => [],\n    },\n    prop: {\n      type: String,\n      default: \"\",\n    },\n  },\n  data() {\n    return {\n      // 校验类名 是否正确\n      validateClassName: \"\",\n      // 错误提示\n      errorMessage: \"\",\n    };\n  },\n  watch: {\n    // 监听值变化 触发校验规则\n    value(newValue) {\n      this.validator(newValue);\n    },\n  },\n  methods: {\n    tiggerValidate(){\n      return this.validator(this.value)\n    },\n    /* 校验哪些规则\n     * @param {String} value 当前输入值\n     */\n    validator(value) {\n      // 所有的校验规则执行\n      const result = this.rules.find((item) => {\n        return item.checked ? this.validatorCheck(item, value) : false;\n      });\n      if (result) {\n        // 说明验证不通过\n        this.errorMessage = result.message;\n        this.validateClassName = \"content\";\n        return false\n      } else {\n        // 验证通过\n        this.message = \"\";\n        this.validateClassName = \"\";\n        return true;\n      }\n    },\n    /* 验证每一项规则\n     * @param {Array} rule 校验规则\n     * @param {String} value 当前输入值\n     */\n    validatorCheck(rule, value) {\n      let isCheck = false;\n      switch (rule.type) {\n        case \"required\":\n          // 必填验证\n          isCheck = validator.isEmpty(value);\n          break;\n        case \"limitNumbers\":\n          // 数值验证\n          isCheck = !validator.isFloat(value.toString(), { min: rule.min, max: rule.max });\n          break;\n        case \"wordLimit\":\n          // 数字范围验证\n          isCheck = !validator.isLength(value, {\n            min: rule.min,\n            max: rule.max,\n          });\n          break;\n        case \"limitInputType\":\n          // 正则验证\n          isCheck = !eval(rule.pattern).test(value);\n          break;\n      }\n      return isCheck;\n    },\n  },\n};\n</script>\n<style scoped lang=\"less\">\n.content {\n  > * {\n    border: 1px solid #e25246 !important ;\n    box-shadow: 0 0 0 2px rgba(226, 82, 70, 0.3) !important;\n  }\n}\n.rule {\n  color: #e25246;\n  transition: color 0.3s cubic-bezier(0.4, 0, 1, 1);\n}\n</style>\n"]}]}